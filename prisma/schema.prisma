generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  bids              Bid[]
  listedProducts    Product[] @relation(name: "listedProducts")
  purchasedProducts Product[] @relation(name: "purchasedProducts")
  favorites         Product[] @relation(name: "favorites", fields: [favoriteIds], references: [id])
  favoriteIds       String[]  @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  Admin             Admin?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  picture   String
  models    Model[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  brand       Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String     @db.ObjectId
  products    Product[]
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modelIds  String[] @db.ObjectId
  models    Model[]  @relation(fields: [modelIds], references: [id])
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  price           Float
  description     String
  pictures        String[]
  model           Model    @relation(fields: [modelId], references: [id])
  modelId         String   @db.ObjectId
  owner           User     @relation("listedProducts", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String   @db.ObjectId
  buyer           User?    @relation("purchasedProducts", fields: [buyerId], references: [id])
  buyerId         String?  @db.ObjectId
  room            Room?
  favoritedUser   User[]   @relation(name: "favorites", fields: [favoritedUserId], references: [id])
  favoritedUserId String[] @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Room {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  bids         Bid[]    @relation(name: "bids")
  bidIds       String[] @db.ObjectId
  highestBid   Bid?     @relation(name: "highestBid")
  highestBidId String?  @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @unique @db.ObjectId
  createdAt    DateTime @default(now())
  closedAt     DateTime
}

model Bid {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @db.ObjectId
  price               Float
  room                Room?    @relation(name: "bids", fields: [roomId], references: [id], onDelete: Cascade)
  roomId              String?  @db.ObjectId
  highestBiddedRoom   Room?    @relation(name: "highestBid", fields: [highestBiddedRoomId], references: [id])
  highestBiddedRoomId String?  @unique @db.ObjectId
  createdAt           DateTime @default(now())
}
